/* Source - https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/
   Author - Shivam Arora
*/
#include <bits/stdc++.h>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left, *right;

    TreeNode(int v) {
        val = v;
        left = right = NULL;
    }
};

long maxProd = 0;

long totalSum(TreeNode* root) {
    if(root == NULL)
        return 0;
    
    return root->val + totalSum(root->left) + totalSum(root->right);
}
    
long helper(TreeNode* root, long totalSum) {
    if(root == NULL)
        return 0;
    
    long left = helper(root->left, totalSum);
    long right = helper(root->right, totalSum);
    
    long currSum = (left + right + root->val);
    long remSum = (totalSum - currSum);
    long prod = (currSum * remSum);
    
    maxProd = prod > maxProd ? prod : maxProd;
    
    return currSum;
}

int maxProduct(TreeNode* root) {
    helper(root, totalSum(root));
    
    return maxProd % int(1e9 + 7);
}

int main()
{
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);

    cout<<"Maximum product generated by splitting the given binary tree: "<<maxProduct(root)<<endl;
}